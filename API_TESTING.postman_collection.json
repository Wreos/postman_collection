{
	"info": {
		"_postman_id": "4fea16c5-7511-4301-b448-7c72c2872eba",
		"name": "API_TESTING",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "https://swapi.co/api/",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fef5610f-b374-4231-a2d0-83259c6bd7d4",
						"exec": [
							"// correct response format JSON",
							"pm.test(\"Correct response format JSON\", function(){",
							"    pm.response.to.have.jsonBody()",
							"});",
							"",
							"//2. We have all the declared fiels in the reponse",
							"pm.test(\"Check that we have all declared fields\", function(){",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"people\");",
							"    pm.expect(jsonData).to.have.property(\"planets\");",
							"    pm.expect(jsonData).to.have.property(\"films\");",
							"    pm.expect(jsonData).to.have.property(\"species\");",
							"    pm.expect(jsonData).to.have.property(\"vehicles\");",
							"    pm.expect(jsonData).to.have.property(\"starships\");",
							"})",
							"",
							"//3. Field value isn't NULL",
							"pm.test(\"Check if value isn't null\", function(){",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.people).not.equal(null);",
							"    pm.expect(jsonData.planets).not.equal(null);",
							"    pm.expect(jsonData.films).not.equal(null);",
							"    pm.expect(jsonData.species).not.equal(null);",
							"    pm.expect(jsonData.vehicles).not.equal(null);",
							"    pm.expect(jsonData.starships).not.equal(null);",
							"})",
							"",
							"//4. Check if value isn't empty",
							"pm.test(\"Check if value isn't empty\", function(){",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.people).not.equal(\"\");",
							"    pm.expect(jsonData.planets).not.equal(\"\");",
							"    pm.expect(jsonData.films).not.equal(\"\");",
							"    pm.expect(jsonData.species).not.equal(\"\");",
							"    pm.expect(jsonData.vehicles).not.equal(\"\");",
							"    pm.expect(jsonData.starships).not.equal(\"\");",
							"    ",
							"})",
							"",
							"//5. Check if field corresponds to a specific value",
							"pm.test(\"Check if field corresponds to a specific value\", function(){",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.people).to.equal(\"https://swapi.co/api/people/\");",
							"    pm.expect(jsonData.planets).to.equal(\"https://swapi.co/api/planets/\");",
							"    pm.expect(jsonData.films).to.equal(\"https://swapi.co/api/films/\");",
							"    pm.expect(jsonData.species).to.equal(\"https://swapi.co/api/species/\");",
							"    pm.expect(jsonData.vehicles).to.equal(\"https://swapi.co/api/vehicles/\");",
							"    pm.expect(jsonData.starships).to.equal(\"https://swapi.co/api/starships/\");",
							"})",
							"",
							"//6. Status code is 200",
							"pm.test(\"Status code is 200\", function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"//7. Status message is OK",
							"pm.test(\"Status message is OK\",function(){",
							"    pm.response.to.have.status(\"OK\");",
							"})",
							"//8. Response time is less than 1000ms",
							"pm.test(\"Response time is less thank 1000ms\", function(){",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"    })",
							"//9. There is a specific header in the response",
							"pm.test(\"There is a specific header in the response\", function(){",
							"    pm.response.to.have.header(\"Content-Type\");",
							"})",
							"",
							"//10. The response has a specific header with a specific value",
							"pm.test(\"The response has a specific header with a specific value\", function(){",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\");",
							"})",
							"//11. Cookie exist",
							"pm.test(\"Cookie exist\", function(){",
							"    pm.cookies.has(\"__cfduid\");",
							"})",
							"//12. Cookie has specific value",
							"pm.test(\"Cookie has specific value\", function(){",
							"    try {",
							"        var MY_COOKIE =pm.cookies.get(\"__cfduid\");",
							"        console.log(MY_COOKIE);",
							"    }",
							"    catch(e){",
							"        console.log(\"some problem with cookie ->\"+e)",
							"    }",
							"})",
							"",
							"",
							"var data = JSON.parse(responseBody);",
							"var schema = {",
							"    // specify the type of object",
							"    \"type\":\"object\",",
							"    //specify requires properties",
							"    \"required\":[\"people\",\"planets\",\"films\",\"species\",\"vehicles\",\"starships\"],",
							"    //desribe the properties",
							"    \"properties\":{",
							"        \"people\":{\"type\":\"string\"},",
							"        \"planets\":{\"type\":\"string\"},",
							"        \"films\":{\"type\":\"string\"},",
							"        \"species\":{\"type\":\"string\"},",
							"        \"vehicles\":{\"type\":\"string\"},",
							"        \"starships\":{\"type\":\"string\"}",
							"    }};",
							"    pm.test(\"Body is correct\", function(){",
							"        pm.expect(tv4.validate(data,schema)).to.be.true;",
							"    });",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.co/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"co"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "https://c5e34ac5-1652-4a38-99eb-b3930a2c5ded.mock.pstmn.io",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://c5e34ac5-1652-4a38-99eb-b3930a2c5ded.mock.pstmn.io",
					"protocol": "https",
					"host": [
						"c5e34ac5-1652-4a38-99eb-b3930a2c5ded",
						"mock",
						"pstmn",
						"io"
					]
				}
			},
			"response": [
				{
					"name": "https://c5e34ac5-1652-4a38-99eb-b3930a2c5ded.mock.pstmn.io",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"name\":\"Sergei\"}"
						},
						"url": {
							"raw": "https://c5e34ac5-1652-4a38-99eb-b3930a2c5ded.mock.pstmn.io/action",
							"protocol": "https",
							"host": [
								"c5e34ac5-1652-4a38-99eb-b3930a2c5ded",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"action"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Mon, 28 Oct 2019 10:24:17 GMT"
						},
						{
							"key": "ETag",
							"value": "W/\"ad-hpLdhW9fz+FmKYC6Hesx8OKWrPM\""
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=432adacb3d2ed8bd"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=23f17ddbdb91db79"
						},
						{
							"key": "Content-Length",
							"value": "154"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"Sergei\",\n        \"status\":\"created\",\n        \"message\": \"success\"\n    }\n}"
				},
				{
					"name": "https://c5e34ac5-1652-4a38-99eb-b3930a2c5ded.mock.pstmn.io",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://c5e34ac5-1652-4a38-99eb-b3930a2c5ded.mock.pstmn.io",
							"protocol": "https",
							"host": [
								"c5e34ac5-1652-4a38-99eb-b3930a2c5ded",
								"mock",
								"pstmn",
								"io"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Mon, 28 Oct 2019 10:21:33 GMT"
						},
						{
							"key": "ETag",
							"value": "W/\"af-GpPmRW0ySclCbQDmlVYDXw7rYA4\""
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=3799dadb7a7c4668"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=0bd8f9c91601861e"
						},
						{
							"key": "Content-Length",
							"value": "148"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"test\",\n        \"message\": \"success.\"\n    }\n}"
				}
			]
		}
	],
	"protocolProfileBehavior": {}
}